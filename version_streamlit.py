import re
import matplotlib.pyplot as plt
import streamlit as st

# √âtape 1 : Charger la s√©quence √† partir du fichier FASTA
def lire_sequence_fasta(file):
    content = file.read().decode() #Pour lire correctement le fichier FASTA
    lignes = content.splitlines()
    sequence = ""
    for ligne in lignes:
        if not ligne.startswith(">"):
            sequence += ligne.strip()
    return sequence


# √âtape 2 : Rechercher les r√©gions riches en A et T
def calcul_r√©gions_AT(sequence):
    """Renvoie les r√©gions riches en A/T en comparant le nombre de G/C au nombre de A/T dans une r√©gion"""
    taille_r√©gion = 300
    r√©gions_dint√©r√™t = []
    
    for i in range(0, len(sequence) - taille_r√©gion + 1, taille_r√©gion):
        region = sequence[i:i+taille_r√©gion]
        cpt_AT = 0
        cpt_CG = 0
        for base in region:
            if base == 'A' or base == 'T':
                cpt_AT += 1
            elif base == 'C' or base == 'G':
                cpt_CG += 1
        if cpt_AT >= cpt_CG:
            r√©gions_dint√©r√™t.append((i, i + taille_r√©gion, region))  # r√©cup√®re les positions de d√©but et de fin de r√©gion + la r√©gion

    return r√©gions_dint√©r√™t

# √âtape 3 : D√©tecter les motifs DnaA
def motifs_consensus(seq):
    motifs = [
        r"TTATCCACA", r"TTGTCCACA", r"TTATGCACA", r"TTATCCAGA", r"TTATTCACA",
        r"TTATCCAAA", r"TCATTCACA", r"TCATTGACA", r"TTGTGCACA", r"ATATTTAAA"
    ]
    r√©sultats = []
    for motif in motifs:
        for match in re.finditer(motif, seq):  # extraire et localiser les motifs
            position_globale = match.start()  # calcul de la position dans la s√©quence globale
            motif_trouv√© = match.group()  # motif trouv√© dans la r√©gion
            r√©sultats.append((position_globale, motif_trouv√©))

    return r√©sultats

# GC-skew
def GC_skew(seq):
    """ Fonction qui calcule le GC-skew d'une s√©quence """
    C = seq.count('C')
    G = seq.count('G')
    somme = G + C

    if somme == 0:
        return 0  # Pour √©viter de faire une division par 0
     
    return (G - C) / somme

def GCskewfenetre(seq, fenetre):
    """Fonction qui calcule l'asym√©trie GC dans une fen√™tre"""
    sequences = []
    position = []
    for i in range(0, len(seq) - fenetre + 1, fenetre): 
        seq_fenetre = seq[i:i+fenetre]
        val = GC_skew(seq_fenetre)
        sequences.append(val)
        position.append(i + fenetre // 2)  # Pour placer chaque valeur de GC_skew au milieu de sa fen√™tre (pour mieux visualiser sur le graphe)
    return position, sequences

# Fonction pour d√©tecter l'OriC bas√© sur le GC-skew avec un seuil
def detect_oriC_filtree(positions, sequences, seuil=0.1):
    """D√©tecte l'oriC avec un seuil de changement net dans le GC-skew"""
    oriC_positions = []
    for i in range(1, len(sequences)):
        if abs(sequences[i] - sequences[i-1]) > seuil and sequences[i-1] < 0 and sequences[i] > 0:
            oriC_positions.append(positions[i])
    return oriC_positions

# --- Interface Streamlit ---
st.set_page_config(page_title="Analyseur d'OriC", layout="wide", page_icon="üß¨")
st.title("üß¨ D√©t√©cteur d'OriC ")

st.sidebar.header("Param√®tres utilis√©s")
fenetre = 5000
seuil = 0.1
taille_region = 300

st.sidebar.markdown(f"- Taille de la fen√™tre GC-skew : **{fenetre}**")
st.sidebar.markdown(f"- Seuil de d√©tection OriC : **{seuil}**")
st.sidebar.markdown(f"- Taille des r√©gions AT : **{taille_region}**")


fasta_file = st.file_uploader("Chargez votre fichier FASTA")

if fasta_file:
    seq = lire_sequence_fasta(fasta_file)
    st.success(f"Fichier charg√©, longueur de la s√©quence : {len(seq)} bases.")

    # Motifs DnaA
    motifs = motifs_consensus(seq)
    st.subheader("Motifs DnaA trouv√©s")
    st.write(f"Nombre de motifs d√©tect√©s : {len(motifs)}")
    if motifs:
        st.dataframe([{"Position": m[0], "Motif": m[1]} for m in motifs])

    # GC-skew
    pos_gc, val_gc = GCskewfenetre(seq, fenetre)
    oriC_pos = detect_oriC_filtree(pos_gc, val_gc, seuil)

    st.subheader("GC-skew et d√©tection de l'OriC")
    fig, ax = plt.subplots(figsize=(12, 5))
    ax.plot(pos_gc, val_gc, marker='o', label="GC-skew")
    ax.axhline(0, color='gray', linestyle='--')
    for i in oriC_pos:
        ax.axvline(x=i, color='red', linestyle='--', label="OriC d√©tect√©" if i == oriC_pos[0] else "")
    ax.set_xlabel("Position")
    ax.set_ylabel("GC-skew")
    ax.set_title("GC-skew de la s√©quence")
    ax.legend()
    st.pyplot(fig)

    if oriC_pos:
        st.success(f"OriC d√©tect√© √† la position(s) : {oriC_pos}")
    else:
        st.warning("Aucun OriC d√©tect√©.")

    st.markdown("---")
    st.info("D√©velopp√© par Farah YOUNES et Alyssa Morellon")

else:
    st.info("Veuillez charger un fichier FASTA pour commencer l'analyse.")